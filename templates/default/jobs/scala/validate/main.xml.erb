<?xml version='1.0' encoding='UTF-8'?>
<com.cloudbees.plugins.flow.BuildFlow plugin="build-flow-plugin@0.9">
<%= flowProject(
    repoUser:    @user,
    repoName:    "scala",
    repoRef:     @branch,
    description: "PR validation -- called for every commit in every PR and every push",
    params: [
      {:name => "prDryRun", :desc => ""},
      {:name => "antBuildArgs", :desc => "Extra arguments for the ant build. For example, `-Dscalac.args=\"-Xcheckinit\"`."},
      {:name => "testExtraArgs", :desc => "Extra arguments for partest. For example, `-Dpartest.scalac_opts=\"-Xcheckinit\"`."},
      {:name => "testTarget", :desc => "Ant test targets to call. The default is 'test.core docs.done'."},
      {:name => "_scabot_pr", :desc => "For internal use by Scabot."},
      {:name => "_scabot_last", :desc => "For internal use by Scabot."}
    ],
    buildNameScript: setValidateBuildNameScript,
    dsl: <<-EOX
upstreamBuild = build(params, "#{job("validate/publish-core")}").build

// for testing, to avoid re-running the main build:
//   upstreamBuild = jenkins.model.Jenkins.instance.items.find{it.name == "#{job("validate/publish-core")}"}.builds[0]

// defines maven.version.number
upstreamPropsArtifact = upstreamBuild.artifacts.find{it.name == "jenkins.properties"}

if (upstreamPropsArtifact == null) {
  out.println('Error: publish-core did not publish "jenkins.properties" artifact, unable to proceed.')
  build.state.setResult(Result.FAILURE)
  return
}

buildVersionProps = new java.util.Properties()
buildVersionProps.load(new java.io.FileInputStream(upstreamPropsArtifact.file))

testParams = params + [ "scalaVersion" : buildVersionProps["maven.version.number"] ]

if (branch.index("2.11.x") == 0) {
  parallel (
     { build(testParams, "#{job("validate/test")}") },
     { retry(2, { build(testParams, "#{job("integrate/ide")}") }) }
  )
}
else {
  build(testParams, "#{job("validate/test")}")
}

EOX
) %>
</com.cloudbees.plugins.flow.BuildFlow>
